v = readlines("input.txt");


function getError(t)
  score = 0
  scores = Dict('>' => ['<', 25137], ')' => ['(', 3], ']' => ['[', 57], '}' => ['{', 1197])
  i = 1
  while i <= length(t)
    if t[i] in keys(scores)
      if i == 1  # closing bracket in position 1
        score = scores[t[i]][2]
      elseif t[i-1] != scores[t[i]][1]  # mismatched bracet
        score = scores[t[i]][2]
      else # ok, but remove pair from string
        t = t[1:(i-2)] * t[(i+1):end]
        i -= 2
      end 
      # print(t*"["*string(i)*"] - "*t[i]*" score " * string(score) *"\n")
    end
    i += 1
    if score >0
      break
    end
  end
  [score, t]
end


# tests
getError("{([(<{}[<>[]}>{[]{[(<()>")
getError("[({(<(())[]>[[{[]{<()<>>")

score = 0
for x in v
  score += getError(x)[1]
end
score

# part 2
# complete and score the incomplete lines

function complete(t)
  score = 0
  scores = Dict('(' => 1, '[' => 2, '{' => 3, '<' => 4)
  scale = 5

  for i in length(t):-1:1
    score = 5*score + scores[t[i]]
  end
  score
end

getError("<{([{{}}[<[[[<>{}]]]>[]]")
complete(getError("<{([{{}}[<[[[<>{}]]]>[]]")[2])

# get median score

using Statistics
scoreV = zeros(Int, length(v))
for i in 1:length(v)
  a = getError(v[i])
  if a[1] == 0
    scoreV[i] = complete(a[2])
  end
end
ss = scoreV[scoreV .> 0]
median(ss)
(sort(ss))[28]
(sort(ss))[Int((length(ss)-1)/2)]




